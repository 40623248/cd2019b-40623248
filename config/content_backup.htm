<h1>Onshape 協同繪製</h1>
<h2>手足球台設計</h2>
<p><a href="https://cad.onshape.com/documents/e2d73c178693cf0ad0bc31ca/w/906d408a6912d36ffb4e57db/e/932b8a1334f80a90eae3c0b4">Onshape</a></p>
<p><img alt="" height="376" src="/images/p37_16-48-07.png" width="800"/></p>
<p>參考了老師的提供的影片，模仿他麼]們的做法畫出了這個足球台，參考影片是以木材去製作，所以我的零件都是以一片一片去繪製，組合在一起。</p>
<p><img alt="" height="500" src="/images/p37_16-50-51.png" width="800"/></p>
<p></p>
<p>參考影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PgnvZV5s13c" width="560"></iframe></p>
<p>參考資料:</p>
<p><a href="https://iliketomakestuff.com/product/foosball-table/">https://iliketomakestuff.com/product/foosball-table/</a></p>
<h2>送球機構設計</h2>
<p>onshape動畫 : onshape <a href="https://cad.onshape.com/documents/e2d73c178693cf0ad0bc31ca/w/906d408a6912d36ffb4e57db/e/8f0dd3c381a0845710389e2e">Link</a></p>
<p><a href="https://github.com/40623248/cd2019b-40623248/blob/gh-pages/downloads/final.ttt">vrep</a></p>
<p><img alt="" height="384" src="/images/2019-06-02_11-57-45.gif" width="800"/></p>
<p><span><strong>設計:</strong></span></p>
<p>利用pyslvs模擬機構運行路徑</p>
<p><img alt="" height="413" src="/images/p37_12-51-16.png" width="800"/></p>
<p>利用onshape 將機構繪出，並繪製出抬球機構</p>
<p><img alt="" height="385" src="/images/p37_13-13-31.png" width="800"/></p>
<p><img alt="" height="385" src="/images/p37_13-18-46.png" width="800"/></p>
<p>PS: 剛開始在畫的時候，要抓到球的位置並不容易，於是參考老師的影片，將第二個抬球的零件改為撥桿，比要容易就能將球運上去。</p>
<p>onshape繪製影片</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/IPTHoy8oZS8" width="560"></iframe></p>
<h1>V-rep 動態模擬</h1>
<h2>送球機構模擬</h2>
<p><span style="color: #0000ff;"><strong>Vrep模擬 :</strong></span><span style="color: #000000;"><strong> </strong><strong> <a href="https://github.com/40623248/cd2019b-40623248/blob/gh-pages/downloads/lifter.ttt" style="color: #000000;">vrep檔案</a></strong></span></p>
<p><span style="color: #000000;">加裝sensor : 當</span><span style="color: #000000;">球來的時候 ，機構才開使運行。</span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GR-1GkJjYLo" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WhUzTyViSXA" width="560"></iframe></p>
<p>將抬球機構與球桌合併<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/__0Ib9cTzrA" width="560"></iframe></p>
<p></p>
<p></p>
<p>以下為連桿機構相參考資料：</p>
<p><a href="https://youtu.be/mtv6j7pa7xM"></a></p>
<h2>V-rep 程式</h2>
<h3>送球機構</h3>
<p><img alt="" height="393" src="/images/p37_17-03-03.png" width="800"/></p>
<p><img alt="" height="383" src="/images/p37_17-04-12.png" width="600"/></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    joint=sim.getObjectHandle('drive_1')
    Sensor2=sim.getObjectHandle("1_sensor_1")
    Sensor=sim.getObjectHandle("1_sensor_2")
    speed=0
    A=-1
    B=-1
    i=0
    p=0
end

function sysCall_actuation()
    result=sim.readProximitySensor(Sensor2)
    if (result&gt;0) then A=sim.getSimulationTime()+4.6 end
    if (A&lt;sim.getSimulationTime()) then
        sim.setJointTargetVelocity(joint,speed)
    else
        sim.setJointTargetVelocity(joint,speed-1)
    end
    k=sim.readProximitySensor(Sensor)
    if (k&gt;0) then 
        p=p+0.1
    else
        p=0
    end
    if (p&gt;3) then p=0 end
    if (p&gt;2.9) then
        i=i+1
sim.addStatusbarMessage('team A point:'..i)
    end
        

end
</pre>
<p></p>
<h3>人對人</h3>
<p><img alt="" height="393" src="/images/p37_17-07-53.png" width="800"/></p>
<p></p>
<p></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==119) then
                    -- up key
                    velocity=100
                    torque=200
                    hammer_back = 0
                end
                if (auxiliaryData[1]==115) then
                    -- down key
                     hammer_back = 1
                     torque=-200
                     velocity = -100
                end
                if (auxiliaryData[1]==97) then
                    -- right key
                     sliding = sliding + 0.005
                     sliding_1 = sliding_1 + 0.005  
                end
                if (auxiliaryData[1]==100) then
                    -- left key
                     sliding = sliding - 0.005
                     sliding_1 = sliding_1 - 0.005
                end
                if (sliding &lt; -0.0445) then
                    sliding = -0.0445
                elseif (sliding &gt; 0.0445) then
                    sliding = 0.0445
                end
                if (sliding_1 &lt; -0.08255) then
                    sliding_1 = -0.08255
                elseif (sliding_1 &gt; 0.08255) then
                    sliding_1 = 0.08255
                end
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired hammer position:
        if hammer_back == 1
            then 
               sim.setJointPosition(joint, -1, orientation)
               sim.setJointPosition(joint_1, -1, orientation)
               --sim.setObjectPosition(hammer, -1, position)
        end
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointTargetPosition(joint_1, velocity)
        --sim.setJointForce(joint,torque)
        sim.setJointTargetPosition(slider, sliding)
        sim.setJointTargetPosition(slider_1, sliding_1)

        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('A1_1_joint')
hammer=sim.getObjectHandle('A1_1_player')
slider=sim.getObjectHandle("A1_1_slider")
joint_1=sim.getObjectHandle('A1_2_joint')
hammer_1=sim.getObjectHandle('A1_2_player')
slider_1=sim.getObjectHandle("A1_2_slider")
velocity=0
hammer_back=0
torque=0
sliding = 0
sliding_1 = 0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer, -1)
slider_position=sim.getJointPosition(slider, -1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end</pre>
<p></p><h2>系統功能展示</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wkhAIW39eGQ" width="560"></iframe></p>
<p>新增了2個vision sensor，當成玩家視角，使對打更加順利。</p>
<p><img alt="" height="429" src="/images/p37_17-18-31.png" width="800"/></p>
<p><img alt="" height="393" src="/images/p37_17-08-12.png" width="800"/></p>
<h1>期末報告</h1>
<p><span>評分比例：</span></p>
<p><span>學員出席 (20%)：</span></p>
<p><span>20%</span></p>
<p><span>Github 倉儲管理  (20%)：</span></p>
<p><span>10%</span></p>
<p>Onshape 協同操作 (20%)：</p>
<p>18<span>%</span></p>
<p>V-rep 模擬 (20%)：</p>
<p>18<span>%</span></p>
<p>程式開發 (20%)：</p>
<p>10<span>%</span></p>
<p>總分：76</p>
<p></p>